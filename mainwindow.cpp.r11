/*************************************************
**
** Copyright (C) 2015
**
*************************************************/
#include "mainwindow.h"
#include "ui_mainwindow.h"
//#include "console.h"
#include "settingsdialog.h"
#include <QMessageBox>
#include <QtSerialPort/QSerialPort>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);


    serial = new QSerialPort(this);
    settings = new SettingsDialog;


    receiveDat = new QByteArray();
    receiveHandleTimer = new QTimer(this);
    receiveHandleTimer->setSingleShot(true);
    connect(
        receiveHandleTimer,
        SIGNAL(timeout()),
        this,
        SLOT(receiveDatHandle())
    );


    ui->actionConnect->setEnabled(true);
    ui->actionDisconnect->setEnabled(false);
    ui->actionQuit->setEnabled(true);
    ui->actionConfigure->setEnabled(true);

    initActionsConnections();

    connect(serial, SIGNAL(error(QSerialPort::SerialPortError)), this,           SLOT(handleError(QSerialPort::SerialPortError)));

    connect(serial, SIGNAL(readyRead()), this, SLOT(readData()));

} //MainWindow()



MainWindow::~MainWindow()
{
    delete settings;
    delete ui;
}


void MainWindow::openSerialPort()
{
    SettingsDialog::Settings p = settings->settings();
    serial->setPortName(p.name);
    serial->setBaudRate(p.baudRate);
    serial->setDataBits(p.dataBits);
    serial->setParity(p.parity);
    serial->setStopBits(p.stopBits);
    serial->setFlowControl(p.flowControl);
    if (serial->open(QIODevice::ReadWrite)) {
        //console->setEnabled(true);
        //console->setLocalEchoEnabled(p.localEchoEnabled);
        ui->actionConnect->setEnabled(false);
        ui->actionDisconnect->setEnabled(true);
        ui->actionConfigure->setEnabled(false);
        ui->statusBar->showMessage(tr("Connected to %1 : %2, %3, %4, %5, %6")  .arg(p.name).arg(p.stringBaudRate).arg(p.stringDataBits)                                .arg(p.stringParity).arg(p.stringStopBits).arg(p.stringFlowControl));
    }
    else {
        QMessageBox::critical(this, tr("Error"), serial->errorString());
        ui->statusBar->showMessage(tr("Open error"));
    }

}//openSerialPort()


void MainWindow::closeSerialPort()
{
    if(serial->isOpen()){
        serial->close();
    }
    //console->setEnabled(false);
    ui->actionConnect->setEnabled(true);
    ui->actionDisconnect->setEnabled(false);
    ui->actionConfigure->setEnabled(true);
    ui->statusBar->showMessage(tr("Disconnected"));

}//closeSerialPort()



void MainWindow::about()
{
    QMessageBox::about(this, tr("About Simple Terminal"),tr("The <b>NeolithUart v1.0</b>."));

} //about()



void MainWindow::writeData(const QByteArray &data)
{
    serial->write(data);
    //Returns the number of bytes that were actually written, or -1 if an error occurred.

}//writeData()



void MainWindow::readData()
{
    receiveDat->append(serial->readAll());
    //先缓存数据，再调用定时器，设置一定时间后，再处理缓存中的数据
    //qDebug()<<"receive uart data cache: " <<QString(receiveDat)<<endl;
    receiveHandleTimer->start(20); //毫秒

}//readData()



//处理接收的uart缓存数据
void MainWindow::receiveDatHandle(){
    //显示
    //ui->texBro_receiveDat->append(QString(receiveDat));

    QTextCodec *codec = QTextCodec::codecForName("KOI8-R");
    QString string = codec->toUnicode(*receiveDat);
    ui->texBro_receiveDat->append(string);


    //与发送数据对比

    //清除数据
    receiveDat->clear();

} //receiveDatHandle()




void MainWindow::handleError(QSerialPort::SerialPortError error)
{
    if (error == QSerialPort::ResourceError) {
        QMessageBox::critical(this, tr("Critical Error"), serial->errorString());
        closeSerialPort();
    }
}


void MainWindow::initActionsConnections()
{
    connect(ui->actionConnect, SIGNAL(triggered()), this, SLOT(openSerialPort()));

    connect(ui->actionDisconnect, SIGNAL(triggered()), this, SLOT(closeSerialPort()));

    connect(ui->actionQuit, SIGNAL(triggered()), this, SLOT(close()));

    connect(ui->actionConfigure, SIGNAL(triggered()), settings, SLOT(show()));

    connect(ui->actionClear, SIGNAL(triggered()), this, SLOT(clearReceive()));

    connect(ui->actionAbout, SIGNAL(triggered()), this, SLOT(about()));

    connect(ui->actionAboutQt, SIGNAL(triggered()), qApp, SLOT(aboutQt()));

}//initActionsConnections()


//清空接收数据
void MainWindow::clearReceive(){
    //清空显示
    ui->texBro_receiveDat->clear();

}


//发送数据区1
void MainWindow::on_pusBut_sendDat1_clicked()
{
    QString writeToUartStr;
    writeToUartStr = ui->texEdi_sendDat1->toPlainText();
    writeData(writeToUartStr.toLocal8Bit());

}









