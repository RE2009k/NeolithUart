/*************************************************
**
** Copyright (C) 2015
**
*************************************************/
#include "mainwindow.h"
#include "ui_mainwindow.h"
//#include "console.h"
#include "settingsdialog.h"
#include <QMessageBox>
#include <QtSerialPort/QSerialPort>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    ui->splitter_disOpt->setStretchFactor(0,7);
    ui->splitter_disOpt->setStretchFactor(1,3);


    serial = new QSerialPort(this);
    settings = new SettingsDialog;


    receiveDat = new QByteArray();
    receiveHandleTimer = new QTimer(this);
    receiveHandleTimer->setSingleShot(true);
    connect(
        receiveHandleTimer,
        SIGNAL(timeout()),
        this,
        SLOT(receiveDatHandle())
    );


    ui->actionConnect->setEnabled(true);
    ui->actionDisconnect->setEnabled(false);
    ui->actionQuit->setEnabled(true);
    ui->actionConfigure->setEnabled(true);

    initActionsConnections();

    connect(serial, SIGNAL(error(QSerialPort::SerialPortError)), this,           SLOT(handleError(QSerialPort::SerialPortError)));

    connect(serial, SIGNAL(readyRead()), this, SLOT(readData()));


    recDisLineNum = 0;   //接收并显示到屏幕上的数据的行数
    pauseRevDis = false; //暂停显示

    //设置发送串口数据间隔时间的有效区间
    sendIntervalValidator = new QIntValidator(1, 1000000, this);
    ui->lineEdit_sendInterval1->setValidator(sendIntervalValidator);
    ui->lineEdit_sendInterval2->setValidator(sendIntervalValidator);
    ui->lineEdit_sendInterval3->setValidator(sendIntervalValidator);
    ui->lineEdit_sendInterval4->setValidator(sendIntervalValidator);

    //自动轮发
    autoSendEnFlg1 = false;
    autoSendEnFlg2 = false;
    autoSendEnFlg3 = false;
    autoSendEnFlg4 = false;
    AutoSendRunEnFlg = false;


} //MainWindow()



MainWindow::~MainWindow()
{
    delete settings;
    delete ui;
}


void MainWindow::openSerialPort()
{
    SettingsDialog::Settings p = settings->settings();
    serial->setPortName(p.name);
    serial->setBaudRate(p.baudRate);
    serial->setDataBits(p.dataBits);
    serial->setParity(p.parity);
    serial->setStopBits(p.stopBits);
    serial->setFlowControl(p.flowControl);
    if (serial->open(QIODevice::ReadWrite)) {
        //console->setEnabled(true);
        //console->setLocalEchoEnabled(p.localEchoEnabled);
        ui->actionConnect->setEnabled(false);
        ui->actionDisconnect->setEnabled(true);
        ui->actionConfigure->setEnabled(false);
        ui->statusBar->showMessage(tr("Connected to %1 : %2, %3, %4, %5, %6")  .arg(p.name).arg(p.stringBaudRate).arg(p.stringDataBits)                                .arg(p.stringParity).arg(p.stringStopBits).arg(p.stringFlowControl));
    }
    else {
        QMessageBox::critical(this, tr("Error"), serial->errorString());
        ui->statusBar->showMessage(tr("Open error"));
    }

}//openSerialPort()



void MainWindow::closeSerialPort()
{
    if(serial->isOpen()){
        serial->close();
    }
    //console->setEnabled(false);
    ui->actionConnect->setEnabled(true);
    ui->actionDisconnect->setEnabled(false);
    ui->actionConfigure->setEnabled(true);
    ui->statusBar->showMessage(tr("Disconnected"));

}//closeSerialPort()



void MainWindow::about()
{
    QMessageBox::about(this, tr("About Simple Terminal"),tr("The <b>NeolithUart v1.0</b>."));

} //about()



void MainWindow::handleError(QSerialPort::SerialPortError error)
{
    if (error == QSerialPort::ResourceError) {
        QMessageBox::critical(this, tr("Critical Error"), serial->errorString());
        closeSerialPort();
    }
}



void MainWindow::initActionsConnections()
{
    connect(ui->actionConnect, SIGNAL(triggered()), this, SLOT(openSerialPort()));

    connect(ui->actionDisconnect, SIGNAL(triggered()), this, SLOT(closeSerialPort()));

    connect(ui->actionQuit, SIGNAL(triggered()), this, SLOT(close()));

    connect(ui->actionConfigure, SIGNAL(triggered()), settings, SLOT(show()));

    connect(ui->actionClear, SIGNAL(triggered()), this, SLOT(clearReceiveDisplay()));

    connect(ui->actionAbout, SIGNAL(triggered()), this, SLOT(about()));

    connect(ui->actionAboutQt, SIGNAL(triggered()), qApp, SLOT(aboutQt()));

}//initActionsConnections()





//===============================================
//写数据到串口上
void MainWindow::writeData(const QByteArray &data)
{
    serial->write(data);
    //Returns the number of bytes that were actually written, or -1 if an error occurred.

}//writeData()



void MainWindow::readData()
{
    receiveDat->append(serial->readAll());
    //先缓存数据，再调用定时器，设置一定时间后，再处理缓存中的数据
    //qDebug()<<"receive uart data cache: " <<QString(receiveDat)<<endl;
    receiveHandleTimer->start(20); //毫秒

}//readData()



//处理接收的uart缓存数据
void MainWindow::receiveDatHandle(){
    //显示超过一定行数后自动清空接收显示区
    if(recDisLineNum > 1000){
        clearReceiveDisplay();
        recDisLineNum = 0;
    }

    //获取系统所用编码
    QTextCodec *codec = QTextCodec::codecForLocale();
    QString string = codec->toUnicode(*receiveDat);

    //打印到接收显示区
    if(pauseRevDis == false){
        ui->texBro_receiveDat->append(string);
        recDisLineNum++;
    }

    //与发送数据对比



    //清除接收缓存中的数据
    receiveDat->clear();

} //receiveDatHandle()



//清空接收数据
void MainWindow::clearReceiveDisplay(){
    //清空显示
    ui->texBro_receiveDat->clear();

}


//手动发送数据区1的字符
void MainWindow::on_pusBut_sendDat1_clicked()
{
    sendRegion1Dat();

}//on_pusBut_sendDat1_clicked()



//手动发送数据区域2的字符
void MainWindow::on_pusBut_sendDat2_clicked()
{
    sendRegion2Dat();

}//on_pusBut_sendDat2_clicked()



//手动发送数据区域3的字符
void MainWindow::on_pusBut_sendDat3_clicked()
{
    sendRegion3Dat();

}//on_pusBut_sendDat3_clicked()



//手动发送数据区域4的字符
void MainWindow::on_pusBut_sendDat4_clicked()
{
    sendRegion4Dat();

}//on_pusBut_sendDat4_clicked()


void MainWindow::sendRegion1Dat(){
    QString writeToUartStr;
    writeToUartStr = ui->texEdi_sendDat1->toPlainText();
    writeData(writeToUartStr.toLocal8Bit());
}


void MainWindow::sendRegion2Dat(){
    QString writeToUartStr;
    writeToUartStr = ui->texEdi_sendDat2->toPlainText();
    writeData(writeToUartStr.toLocal8Bit());
}

void MainWindow::sendRegion3Dat(){
    QString writeToUartStr;
    writeToUartStr = ui->texEdi_sendDat3->toPlainText();
    writeData(writeToUartStr.toLocal8Bit());

}



void MainWindow::sendRegion4Dat(){
    QString writeToUartStr;
    writeToUartStr = ui->texEdi_sendDat4->toPlainText();
    writeData(writeToUartStr.toLocal8Bit());

}



//====================================================
//暂停/继续显示
void MainWindow::on_pusBut_pauseDisplay_clicked()
{
    if(pauseRevDis == true) {
        pauseRevDis = false;
        ui->pusBut_pauseDisplay->setText("Pause");
    }
    else {
        pauseRevDis = true;
        ui->pusBut_pauseDisplay->setText("Continue");
    }

}//on_pusBut_pauseDisplay_clicked()



//=====================================================
void MainWindow::on_cheBox_autosend1_clicked(bool checked)
{
    autoSendEnFlg1 = checked;
}

void MainWindow::on_cheBox_autosend2_clicked(bool checked)
{
    autoSendEnFlg2 = checked;
}

void MainWindow::on_cheBox_autosend3_clicked(bool checked)
{
    autoSendEnFlg3 = checked;

}

void MainWindow::on_checBox_autosend4_clicked(bool checked)
{
    autoSendEnFlg4 = checked;

}


//启动自动轮发模式
void MainWindow::on_pusBut_startAutoSend_clicked()
{
    if(AutoSendRunEnFlg == true){
        AutoSendRunEnFlg = false;
        ui->pusBut_startAutoSend->setText("Start AutoSend");
    }
    //当且至少有一个发送区域被使能参加自动发送
    else if(true == (autoSendEnFlg1 || autoSendEnFlg2 || autoSendEnFlg3 || autoSendEnFlg4)){
        AutoSendRunEnFlg = true;
        //启动自动发送
        startRegion1AutoSend();
        ui->pusBut_startAutoSend->setText("Stop AutoSend");
    }


} //on_pusBut_startAutoSend_clicked()



//=================================================
//启动发送数据区1的自动轮发
void MainWindow::startRegion1AutoSend() {
    if(AutoSendRunEnFlg){
        if(autoSendEnFlg1) {
            sendRegion1Dat();
            QTimer::singleShot(100, this, SLOT(startRegion2AutoSend()));
        }
        else {
            startRegion2AutoSend();
        }
    }

}//startRegion1AutoSend()



//启动发送数据区2的自动轮发
void MainWindow::startRegion2AutoSend() {
    if(AutoSendRunEnFlg){
        if(autoSendEnFlg2) {
            sendRegion2Dat();
            QTimer::singleShot(100, this, SLOT(startRegion3AutoSend()));
        }
        else {
            startRegion3AutoSend();
        }
    }

}//startRegion1AutoSend()



//启动发送数据区3的自动轮发
void MainWindow::startRegion3AutoSend() {
    if(AutoSendRunEnFlg){
        if(autoSendEnFlg3) {
            sendRegion3Dat();
            QTimer::singleShot(100, this, SLOT(startRegion4AutoSend()));
        }
        else {
            startRegion4AutoSend();
        }
    }

}//startRegion1AutoSend()



//启动发送数据区4的自动轮发
void MainWindow::startRegion4AutoSend() {
    if(AutoSendRunEnFlg){
        if(autoSendEnFlg4) {
            sendRegion4Dat();
            QTimer::singleShot(100, this, SLOT(startRegion1AutoSend()));
        }
        else {
            startRegion1AutoSend();
        }
    }

}//startRegion1AutoSend()



//=================================================
void MainWindow::on_pusBut_clr1_clicked()
{
   ui->texEdi_sendDat1->clear();
}


void MainWindow::on_pusBut_clr2_clicked()
{
    ui->texEdi_sendDat2->clear();
}


void MainWindow::on_pusBut_clr3_clicked()
{
    ui->texEdi_sendDat3->clear();
}


void MainWindow::on_pusBut_clr4_clicked()
{
    ui->texEdi_sendDat4->clear();
}


//==================================================





